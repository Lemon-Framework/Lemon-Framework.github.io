<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
    <link rel="shortcut icon" href="lemon.png" type="image/x-icon">
    <link rel="icon" href="lemon.png" type="image/x-icon">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://livejs.com/live.js"></script>
    <link rel="stylesheet" href="jquery.highlight.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <script src="//code.jquery.com/mobile/1.5.0-alpha.1/jquery.mobile-1.5.0-alpha.1.min.js"></script>
    <style>
    
        #sidebar 
        {
            height: 100vh;   
            background-image: linear-gradient(#f8f9fa, white);
        }

        @media (max-width: 767px)
        {
            .sidebar-active
            {
                overflow-x: hidden;
                overflow-y: hidden;
            }
            @keyframes visible-ease
            {
                from {width: 15%}
                to {width: 100%}
            }
            @keyframes visible-text
            {
                from {opacity: 0%; margin-left: -50%}
                to {opacity: 100%}
            }
            #sidebar.hidden
            {
                width: 15%;
                transition: 1s ease-in-out;
            }

            #sidebar.hidden>div
            {
                opacity: 0%;
                margin-left: -50%;
                transition: opacity 1s ease-in-out, margin-left 1s ease-in-out;
            }
            #sidebar.visible>#collapse
            {
                transition: 1s ease-in-out;
            }
            #sidebar.visible
            {
                opacity: 100%;
                animation: visible-ease 1s ease-in-out;
            }
            #sidebar.visible>div
            {
                animation: visible-text 1s ease-in-out;
            }

        }

        a 
        {
            text-decoration: none;
            color: #000000;
        }

        a:hover 
        {
            color: #3e3e3e;
            transition: 0.5s ease-in-out;
        }

    
    </style>

    <title>Lemon Documentation</title>
</head>
<body>
    
    <div class="d-flex">
     
        <div class="p-2 col-md-3 col-lg-3 col-12 hidden " id="sidebar">
            <h1 class="text-center sticky-top"><i class=" bi bi-justify d-lg-none d-md-none text-center" id="collapse"></i></h1>            

            <div class="position-fixed col-lg-3">
            <h3>Lemon</h3>
            <details>
                <summary>Get Started</summary>
                    <ul>
                        <li><a href="#installation">Installation</a></li>
                        <li><a href="#quickstart">Quickstart</a></li>
                    </ul>
                </details>
  
                <details>
                    <summary>Framework reference</summary>
                    <ul>
                        <li><a href="#routing">Routing</a></li>
                        <li><a href="#templates">Template system</a></li>
                        <li><a href="#errors">Error handling</a></li>
                        <li><a href="#session">Session</a></li>
                        <li><a href="#csrf">CSRF protection</a></li>
                        <li><a href="#utils">Utils</a></li>
                    </ul>
                </details>
            </ul>            
            </div>
        </div>
        <div class="mx-3 col-9 col-md-8 col-lg-8" style="height: 100vh">
        <div>
        <h1>Lemon Documentation</h1>
        <hr>
        <h2>Get Started</h2>

        Lemon is Micro Framework which means that you can build full website app in one file, which is great for beginners. <a href="/about.html">More about Lemon</a>
        <br>
        Version: 1.2.1
        <br>
        <a href="/changelog.html">Changelog</a>
        <h3 id="installation">Installation</h3>
        
        Installation is provided by composer <code> composer create-project lemon_framework/lemon:dev-master project-name</code>
        <br>
        Lemon won't build your project, only download framework. You need to make file index.php that will be main file of your project and then run using <code>php -S localhost:port</code>
    
        <pre><code>
/project_folder
    /lemon
    /composer.json
    /index.php #here starts your app
        </code></pre>

        <h3 id="quickstart">Quickstart</h3>
        
        This is minimal app built using Lemon:

        <pre class="code" data-language="php">
require "lemon/framework.php";

Route::get("/relative/(.+)/", function($var)
    {
        echo $var;
    });

Route::any("/", function()
    {
        echo "hi";
    });

Route::handler(404, function()
    {
        echo "404";
    });

Route::execute();
        </pre>
            
        <h2>Framework reference</h2>
           Lemon from version 1.0.0 provides basic actions like routing or template system.

           <div class="border-start border-warning border-3 p-2 mb-3 shadow-lg">

                On start of every app must be <code>require "leomon/framework.php";</code>

           </div>

       <h3 id="routing">Routing</h3>

            Routing in Lemon is based on class <code>Route</code> and its inspired by Laravel's routing. This class has 3 main static methods to create routes.
            <br>
            The methods are:
            <ul>
                <li>::get - creates route that allows only method GET</li>
                <li>::post - creates route that allows only method POST</li>
                <li>::any - creates route that allows only methods GET and POST</li>
            </ul>
           <div class="border-start border-warning border-3 p-2 mb-3 shadow-lg">
            Note: If you will send request that is not allowed by route it will throw response 400.
            </div>
            All those methods has 2 arguments <code>Path</code> and <code>Action</code>
            <br>
            <ul>
                <li>Path is way to get to the route.</li>
                <li>Action is function that is called when user visits the page.</li>
            </ul>
           <div class="border-start border-warning border-3 p-2 mb-3 shadow-lg">
            Class route also provides to run your app. To run just type Route::execute() on the end of the code.
            <br>
            Without this your app won't work.

            </div>

            <h5>Dynamic routes</h5>

            Lemon provides you to make dynamic routes, to make dynamic part, just put <code>(.*)</code> and in your route output function argument.

            <pre class="code" data-language="php">
Route::get('/dynamic/(.+)', function ($arg)
    {
        echo $arg;
    });
            </pre>



            <h4>Example</h4>
            <pre class="code" data-language="php">
require "leomon/framework.php";

Route::get('/get', function()
    {
        echo 'You can only get here!';
    });


Route::post('/post', function()
    {
        echo 'You can only post here!';
    });


Route::any('/any', function()
    {
        echo 'You can get and post here!';
    });

Route::execute();
            </pre>

            <h3 id="templates">Template system</h3>
                Template system is way to run html from external file with Cross Site Scripting prevention.
                Since version 1.2.0 Lemon has custom template syntax inspired byJinjaa.
                To start with templates, just make folder <code>views</code> in your project folder and every new template add into this folder as <code>template_name.lemon.php</code>.
                <br>
                Your folder should look like this:
                <pre><code>
/project_folder
    /lemon
    /composer.json
    /views #Here are all the templates
        /home.lemon.php #Example template
    /index.php #main php file with all the routes
                </code></pre>

                To view template just use function <code>view(filename, params)</code> In this function don't use the <code>.lemon.php</code>
                <br>
                To add variables to template add as second parameter one of those:
                <ul>
                    <li>compact("var", "var2",...)</li>
                    <li>["var_name" => "var_value"]</li>
                </ul>
                <h4>Template syntax</h4>
                <pre class="code" data-language="php">
{{ $var }} Shows variable defined in view function

Foreach
{% foreach($var as $var): %}
loops everything that is here
{% endfor; %}

If

{% if (condition) %}

{% else if (condition): %}

{% else: %}

{% endif; %}
            </div>
            With <code>{%%}</code> can be provided any php action.

            <h4>Example</h4>
            <pre class="code" data-language="php">
//index.php

Route::get('/' function()
    {
        $stuff = ['php', 'vim', 'lemon'];
        view('awesome_view', compact("stuff"));
    });

//views/awesome_view.lemon.php

Cool stuff
{% foreach ($stuff as $item) %}
    {{ $item }}
{% endfor %}
            </pre>


           <h3 id="errors">Error handling</h3>

           Class Route has also static method <code>::handler</code> which provides you to make custom error handling pages.
           <br>
           This class has 2 arguments: (int) Error and function that is called when the error occurs.
           <br> 
           Since version 1.1.0 Lemon supports those errors:
           <ul>
               <li>404 - Not Found</li>
               <li>400 - Bad Request</li>
               <li>500 - Internal Server Error (Is called only when wrong template is used or when there is error in route callback)</li>
           </ul>

           If you won't use custom error handlers, Lemon will throw basic error.

           <h4>Examples</h4>

           <pre class="code" data-language="php">
Route::handler(400, function ()
    {
        echo "Bad request on page".$_SERVER["REQUEST_URI"];
    });
           </pre>

           <h3 id="session">Session</h3>
           Class Session provides you to make session actions through static methods:

           <ul>
               <li>::setName(string name) - sets name of the session.</li>
               <li>::start - starts the session.</li>
           </ul>
           To make it work, you need to put it on the top of your app.
           
           <h3 id="csrf">CSRF protection</h3>
           Lemon provides CSRF protection by class CSRF:

           <ul>
               <li>::setToken - creates unique token to every page visitor, should be on the top of the page</li>
               <li>::getToken - gets you token (made for template @csrf)</li>
               <li>::check - check you if valid csrf token was send - should be on the top of your route</li>
           </ul>
           To make it work, you need to start <a href="#session">session</a><br>
           If you enable csrf protection in your route by <code>CSRF::check()</code> you need to add <code>@csrf</code> to every post form in your template.

           <h4>Example</h4>

           <pre class="code" data-language="php">
//index.php           
&lt?php
require "lemon/framework.php";

Session::start();
CSRF::setToken();

Route::any("/", function() {
        CSRF::check();
        view("template");
    });

Route::execute(); 
?>                             
</pre>
<pre class="code" data-language="html">
//view/template.lemon.php

<form method="POST">
@csrf
<input type="text" name="input">
</form>
           </pre>
            
           <h3 id="utils">Utils</h3>
           Here are other functions that may help you building cool stuff.
           <h4>Redirect</h4>
           Function <code>redirect($link)</code> redirects user to specified URL.
           <h4>Jsonify</h4>
           Function <code>jsonify($array)</code> makes json from array that can be fetched by request.
           <h4>Console</h4>
           Function <code>console($message, $color)</code> sends message to php console. It's mainly debug tool
           <h4>Podvodnik</h4>
           Function <code>isUserPodvodnik($user)</code> returns whenever user is podvodnik.

           <hr>
           Lemon micro framework built by Ten Majkl-&gt; <a href="https://github.com/TENMAJKL/Lemon">GitHub</a>
            </div>
        </div>
    </div>
       
</body>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="jquery.highlight.js"></script>
<script>

$(document).ready(function(){
    $('pre.code').highlight({source:1, zebra:1, indent:'space', list:'ol',attribute: 'data-language'});
    $("#collapse").on('click', function(){
        $("#sidebar").toggleClass('hidden');
        $("#sidebar").toggleClass('visible');
        $("body").toggleClass('sidebar-active');
        $("html").toggleClass('sidebar-active');
    });
    $("a").on('click', function(){
        $("body").toggleClass('sidebar-active');
        $("html").toggleClass('sidebar-active');
        $("#sidebar").toggleClass('hidden');
        $("#sidebar").toggleClass('visible');
    });
    $("body").
});


</script>

</html>

